# -*- coding: utf-8 -*-
"""DeepakBhaiya.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q1jLzy0PjDKIrWg2el1W1WIKMmvtI2fK
"""

x=10
print(x)
x

x=10
y=5
z= x+y
print(z)
z

#    single comment - single line
'''    multi line comment '''   '''comment study- multi line, single quotes three times starting and ending'''

print (3**3)  # 3 power 2 , 3 ki power 2

print(3**3) 
''' 3 ki power 2 
here we multiply 3 * 3 * 3'''
print(9-10)
7+9

print('Hello Deepak') # sting data type
variableForString = 'deepak' # single quote is define for string
print(variableForString)

# VARIABLE

variableForNumberSeven = 7
number2 = 9
string_1 = '45678'
variableForString = 'deepak'
age = 12  #12 is a number, so we not use single quotes
name = 'dheeraj' #dheeraj is a String(Collection of characters), so we use single quotes
string_1 = '45678' # this is not a Number, because it is in the single quotes, it is a String
string_2 = 45678.5678
u = '0' #comment this whole line then see the output / number is not required to define but string is required to define
string_3 = u
print(type('OOPS'))   #direct define to check the DataType 
print(type(45)) #direct define to check the DataType
print(type(age))
print(type(name))
print(type(string_1))
print(type(string_2))
print(type(string_3))

# Maths / Calculation
NumberOne = 20
numberTwo = 12 # variable can not start with no. , and special charter, not including underscor(_)/ variable can start with underscor(_)
print(NumberOne + numberTwo)
print(NumberOne - numberTwo)
print(NumberOne / numberTwo) # it gives float / deciamal value # simple division
print(NumberOne // numberTwo) # it gives int value  # integer / floor division
print(NumberOne % numberTwo) # it gives reminder
print(NumberOne * numberTwo) # it gives multiply
print(3 ** 4) # it gives no. of  power / 3 ki power 4

# Complex Number - defined with j (capital/small)
complexNumberOne = 2 + 2j
complexNumberTwo = 10j
complexNumberThree = 6j + 6j #we can also calculate complex numbers

print (complexNumberOne)
complexNumberTwo # if next command used than it is not print, because we can not use print function
print (complexNumberTwo)
print(complexNumberThree)

print (type(complexNumberOne))
print (type(complexNumberTwo))

# String - string can be inside the single , double, or triple quotes
stringOne = 'message in text'
stringTwo = 'Integer can\'t be a String'  # if in mid line single quotes used backslash(\), then it will ignore the single quotes
stringThree = "Integer can't be a String"
stringFour = '''message = "Integer can't be a String" '''  # if in line mid line single quotes used double/triple quotes, then it will ignore the single quotes
# if in string we use double/triple quotes outside and single quotes inside, then it will print inside double/triple quotes content OR vise-versa

print(stringFour)

# String Manipulation
stringOne = '''message \t=\t"Integer can't be a String" ''' # \t is used for tab space (8 space)
stringOne = '''message =\n"Integer can't be a String" ''' #\n is used for new line
stringOne = '1\n2\n3\n4\n5' # \n new each line
stringOne = '1 2 3 4 5\n' *3 # string multiply three time and used three new line 


print(stringOne)

# Formatted String - new version - python 3.6.10
name = 'Dheeraj'
age = 25
print('Hellow {0}, your age is {1}'.format(name, age)) # .format is used for dynamic string (name and age), name index = 0 and age index = 1; it means index value is define nesseary

# Formatted String - new version - python 3.6.10
name = 'Dheeraj'
age = 25
print(f'Hellow {name}, your age is {age}') # f = format for dynamic string (name and age)

#built-in functions
# print( dir(str) ) # dir () returns the variables and functions of a class/object(pre and self define functions, string, list, tuple, dictionaries) for string function
# dir(int) # returns the variables and functions of a class/object(pre and self define functions, string, list, tuple, dictionaries) for integer function
# print(help('format')) # help () = returns the defination and syntax of the class /object(pre and self define functions, string, list, tuple, dictionaries) for format function
# print(help('type')) # help () = returns the defination and syntax of the class/object(pre and self define functions, string, list, tuple, dictionaries) for type function
# a = (1,0) # when sum the value required two no.or more
# x = sum(a,10)
# print(x)
# print(help('sum'))
# print(help('hash'))
# print(hash(str)) # returning unique hash code for determining the variable/class/object uniqueness/unique number

stringVariable = 5.7 # self define variable
print(dir(stringVariable)) # OR dir(str) OR print(dir(type(stringVariable))) # returns the self-define function of class
print(type(stringVariable)) # returns the data type of variable/function/class
print(type(float)) # returns the data type of variable/function/class
print(hash(stringVariable)) # example of hash

#built in function
stringVariableOne = 'adGJ 123454443 '
print(stringVariableOne.upper()) # to change lower case -> upper case character
print(stringVariableOne.lower()) # to change upper case -> lower case character
print(stringVariableOne.swapcase()) # to change upper case -> lower case and lower case -> upper case character
print(stringVariableOne.count('4')) # count the specific sub-string(specific value/ character)
print(stringVariableOne.find('4')) # find the specific value/ character/ substring
print(stringVariableOne.find('4', 9)) # find the specific value/ character/ substring # Syntax - StringName.find('sub-string value', index value)
print(stringVariableOne.replace('4', '9')) # replace the old value to new value # Syntax- StringName.replace('old value', 'new value'))
print(stringVariableOne.replace('4', '9', 2)) # Syntax- StringName.replace('old value', 'new value', number of changes(Optional))

# to take user input
userInput = input('enter a number: ')   # by defaut it takes input in String DataType
print(userInput)
print(type(userInput))  # by defaut it takes input in String DataType

integerUserInputOne = int(input('Enter a Number: '))  # to convert to string to interger data type we use "int()". #this is called Type Cast
print(integerUserInputOne)
print(type(integerUserInputOne))

integerUserInputTwo = float(input('Enter a Number: '))  # to convert to string to interger data type we use "int()". #this is called Type Cast
print(integerUserInputTwo)
print(type(integerUserInputTwo))

# simple form example
name = input ('enter your name:- ')
age = int(input ('enter your age:- '))
height = float(input('enter your height:- '))

print (f'Name: {name}\nAge: {age}')
print(f'Height: {height}')
print('Your Data is submitted')

# multiple inputs of same DataType
listVariable = list(map(str, input('Enter series of Random Numbers: ').split()))
# list() -> change the value in list type
# map() - > change the value in map structured format
# .split() -> by default it is split from space but we can specify the spliting method # Styntax - .split('.') - it can split from dot ".", comma, space or any character also

print(listVariable)

#List - list defined by square brackets "[ ]"
listVariable = ['21', 5 , 5.8 ] # multiple data types can store in list
print ('Multi DataType List:- ',listVariable)

listVariable = [9,5 , 5.8, 10, 2] # Original order

print('Original List, before sorting:-',listVariable)

listVariable.sort() #It override the Original List. By default sorting order is ascending.

print('After sorting in Ascending order:- ', listVariable)

listVariable.sort(reverse=True) # now the sorting order is descending.  # Syntax - listName.sort(reverse = True/False , key=myFunction (according to function))
print('After sorting in Descending order:- ' , listVariable)

#Access the List
listOne = [9, 'Hellow' , 5.8, 'Deepak', 2]

print(listOne) # access all list elements
# NOTE:- in python slicing (alag alag element) is implemented by colon ":"
print(listOne[:]) # access all list elements
print(listOne[1]) # access 1st index element(access the second element)
print(listOne[1:4]) # access the elements of list from index 1 to 3 (3+1) = (n+1)
print(listOne[0:5]) # access the elements of list from index 0 to 4 (4+1) = (n+1) / (last index + 1) = 5(4+1)

# NOTE:- in serial order indexing starts from 0 to n and in reverse order indexing starts from -1..-2..-3 to -n

print(listOne[0:-2]) # access the elements from index 0 to 2 (in reversing order -2)
print(listOne[-4]) # in reversing order index -4 = 'Hellow', means in order index 1
print(listOne * 3)

# Slicing Practicing - Syntax listName[start index : end index : difference/gap/jump] - gap is by default is 1
listOne = [0,1,2,3,4,5,6,7,8]
print(listOne[0:9]) # print index 0 to 8+1(9)
print(listOne[:]) # print all elements
print(listOne[::]) # print all elements

print(listOne[1:1:1]) # print empty list (no range)
print(listOne[9:10]) # print empty list(out of range)

print(listOne[2:7]) # print index 2 to 6+1(7)

print(listOne[2:8:2]) # print index 2 to 7+1(8) with jump 2 (jump start from start index)
print(listOne[2:8:3]) # print index 2 to 7+1(8) with jump 3 (jump start from start index)
print(listOne[2:8:6]) # print index 2 to 7+1(8) with jump 6 (jump start from start index)
print(listOne[2:9:6]) # print index 2 to 8+1(9) with jump 6 (jump start from start index)

print(listOne[:1:-2]) # OR print(listOne[8:1:-2]) # start to reverse order
print(listOne[::2]) # access in serial order with jump 2

print(listOne[::-2]) # access in reverse order with jump -2

# List inside List

listVariable = ['kaal', [1,2,'76'], 90, 4] 
print(listVariable[1][1]) # first big braket[] in first list index number, and second big braket [] in second list index number 

listVariableTwo = [6, [90,80,70], 5, [60,50,40]]
print(listVariableTwo[3][0])  

listVariableTwo = [6, [90,80,['abc','def'], 70], 5, [60,50,40]]
print(listVariableTwo[1][2][1])
# first big braket[] in first list index number, and second big braket [] in second list index number , and second list inside third big braket [] in third list index number.

# List Manipulation and Functions
listVariableOne = ['kaal', [1,2,'76'], 90, 4] 
listVariableTwo = [6, [90,80,70], 5, [60,50,40]]

# print(listVariableOne + listVariableTwo) # no further use
listVariableThree = listVariableOne + listVariableTwo # marge the two/or more list in one list 
print(listVariableThree) # for further use

print(listVariableOne.pop(1)) #remove the element of index 1()
listVariableOne.pop() # if .pop() used then it remove the last element 
print(listVariableOne)

print(listVariableThree)
print(listVariableThree[5].pop(1)) # remove the list inside list's element

# List Manipulation and Functions
listVariableOne = ['kaal', [1,2,'76'], 90, 4] 
listVariableTwo = [6, [90,80,70], 5, [60,50,40]]

print('Length of List One:-',len(listVariableOne)) # returns the length of the list
listVariableOne.append(listVariableTwo) # .append -> add whole list at last of the original list and effect the original list and second list is not effected 
print(listVariableOne)
print(listVariableTwo)
print('Length of List One:-',len(listVariableOne)) # returns the new length of the list
listVariableOne.append(99)
print(listVariableOne)

# List Manipulation and Functions
listVariableOne = ['kaal', [1,2,'76'], 90, 4] 
listVariableTwo = [6, [90,80,70], 5, [60,50,40]]

print('Length of List One:-',len(listVariableOne))

print(listVariableOne)

listVariableOne.extend(listVariableTwo) # .extend() -> add list as element wise

print(listVariableOne)
print(listVariableTwo)

listVariableOne.extend([5]) # .extend() -> add only as a list, not the single element
print(listVariableOne)

# List Manipulation and Functions
listVariableOne = ['kaal', [1,2,'76'], 90, 4]
print('Count 90:',listVariableOne.count(90)) # .count -> its count the number of repetation of the element


listVariableTwo = [6, [90,80,70], 5, [60,50,40]]
print('Count 80:',listVariableTwo[1].count(80)) # # .count -> its count the number of repetation of the element in list inside list

# to change the specific list element
listVariableOne = ['kaal', [1,2,'76'], 90, 4]
print(listVariableOne)
listVariableOne[0] = 'Deepak' # to change the specific index element
print(listVariableOne)

listVariableOne[1][1] = 'Dheeraj' # to change the specific list inside the list element.
print(listVariableOne)

listVariableOne[1][1] = [70,40,50] # to change the specific list inside the list element. And we can change/add the list
print(listVariableOne)

# Tuple
tupleVariable = (3, 5, 9, 90)
print(tupleVariable) # access tuple value
print(tupleVariable[3]) # access specific tuple value 

print(tupleVariable[1:3]) # access element through slicing 

#tupleVariable[2] = 1  #'tuple' object does not support item replcement/changing of a specific element

tupleVariable = (5, 0, 6, 80) # But we can assign new tuple to that tuple variable(old variable).

print(tupleVariable)

# Tuple
tupleVariableOne = (3, 5, 9, '90')
tupleVariableTwo = (5, 0, 6, 80, 0)

print(tupleVariableOne * 3 ) # multiple tuples

print (tupleVariableTwo.count(0)) # count the specific element

# Unpacking of Tuple
x = y = z = 4 # assign same value in tuple

print(x)
print(y)
print(z)


tupleVariableOne = (3, 5, 9, 90)

w, x, y, z = tupleVariableOne # simple assign tuple, if no. of variable and no. of elements are equal
print(w)
print(x)
print(y)
print(z)

tupleVariableOne = (3, 5, 9, 90, 9)

w, x, *y, z = tupleVariableOne # if elements is more than variable then we can use the star/asterisk "*" with particular variable
print(w)
print(x)
print(y)
print(z)

# tupleVariableOne = (3, 5, 9, 90)

# # w, x, y, z, a = tupleVariableOne  # error
# print(w)
# print(x)
# print(y)
# print(z)

#Find tuple element index
tupleVariableOne = (3, 5, 9, 90)
print (tupleVariableOne.index(9)) # .index() -> index small bracket inside the value of elemnent and find the index location

# Dictionary - key - value pair

dictionaryVariableOne = {
    1 : 'One',
    2: 'Two',
    3: 'Three',
    4: 'Four'
}
# frist starting mid braket " { } "; left -> key, right -> value; both key and values divuded by/mid used the colon, indexing  applies in value.
# key used the only one string/value/character/number at a time only.
#value can be multiple or one used at a time.

print(dictionaryVariableOne)
print(dictionaryVariableOne[2]) # we can access the specific value with key. 1st bracket is used the key. 
print(dictionaryVariableOne[4][2]) # we can access the specific value with key. 1st bracket is used the key, and second bracket is index value of the element.

dictionaryVariableTwo = {
    'Name' : ['Deepak','Dheeraj', 'Prakhar', 'Sameer'],
    'Age': [33,25,23,22],
    'Gender': ['Male','Male','Male','Male'],
    'Height': [178,176,177,174]
}

print(dictionaryVariableTwo)
print(dictionaryVariableTwo['Height'])  # we can access the specific value with key. 1st bracket is used the key. 
print(dictionaryVariableTwo['Height'][3]) # we can access the specific value with key. 1st bracket is used the key, and second bracket is index value of the element.

#Types of Collection

# List
listOne = [9, 'Hellow' , 5.8, 'Deepak', 2] # List - Multiple Values can store, duplicates allowed, defined from square brackets "[ ]"
print(type(listOne))
print(listOne)

# Tuple
tupleVariable = (1,5,9,'9',9,1,6,2) # Tuple - Multiple Values can store, duplicates allowed, defined from small/round brackets "( )"
print(type(tupleVariable))
print(tupleVariable)

# Set
setOne = {1,5,9,'9',9,1,6,2} # Set - Multiple Values can store, duplicates NOT allowed, print only unique, defined from Curly brackets "{ }"
print(type(setOne))
print(setOne)

# Dictionay
detailsDictionary = {
    'Name' : ['Deepak','Dheeraj', 'Prakhar', 'Sameer'],
    'Age': [33,25,23,22],
    'Gender': ['Male','Male','Male','Male'],
    'Height': [178,176,177,174]    # in last data/ value we can not used comma. We use comma only when we have data at next line.
}
print(type(detailsDictionary))
print(detailsDictionary)

# Conditional statement "if"
# Block starts from colon " : ", and a block is not used empty, it will give error if block is empty.
aVar = 5

if(aVar > 5):                              # only if condition used ; at last colan " : " is necessary used
  print(aVar,'is greater than 5')          # one spacing/tab-space is necessary for next command

if(aVar < 6):
  print(aVar,'is less than 6')

if(aVar == 5):
  print(aVar,'is equal to 5')

print('FINISH')

# Conditional statement - nested if
# Block starts from colon " : ", and a block is not used empty, it will give error if block is empty.

aVar = 5

if(aVar > 5):                              # only if condition used ; at last colan " : " is necessary used
  print(aVar,'is greater than 5')          # one spacing/tab-space is necessary for next command

if(aVar < 6):
  print(aVar,'is less than 6')
  if(aVar == 5):                    # here one spacing is necessary for according to next command, if we use "if" condition
    print(aVar,'is equal to 5')

print('FINISH')

# Conditional statement - if-else
age = 20

if(age < 18):                                    # two times are conditions check
  print('not valid for vote')
if (age >= 18):
  print ('valid for vote')

#------------------- both types are used for conditions ----------------------------------------

if (age < 18):                      # one time is condition check
  print('not valid for vote')
else:
  print ('valid for vote')

# Conditional statement - if-else-if
marks = 75

if(marks < 75):
  print('marks is good,  grade A')
elif(75 <= marks and marks <=100):  # we can use two condition with 'and' keyword/operator as used two types (and / &); (or / |) and more operators are used.
  #"else if(cond)" are not used  so we can use "elif()" 
  print ('marks is good , grade A+')
else:
  print('marks is good , grade B')

marks = 55
if(marks < 99):
  pass  # "pass" is used for debugging and if we use empty block. pass do nothing.
  print('OOP')
print('Completed')

# Loop
for var in 4: